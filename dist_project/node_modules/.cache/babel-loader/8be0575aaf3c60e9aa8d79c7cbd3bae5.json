{"ast":null,"code":"var _jsxFileName = \"/Users/zaiba/Desktop/a2z/One-word-at-a-time/dist_project/src/Translate.js\";\nimport React, { Component } from \"react\";\nimport cookie from \"react-cookies\";\nimport { googleTranslate } from \"./utils/googleTranslate\";\n\nclass Translate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      languageCodes: [],\n      language: cookie.load(\"language\") ? cookie.load(\"language\") : \"en\",\n      question: cookie.load(\"question\") ? cookie.load(\"question\") : \"What language do you prefer to read with?\"\n    };\n\n    this.changeHandler = language => {\n      let {\n        question\n      } = this.state;\n      let cookieLanguage = cookie.load(\"language\");\n      let transQuestion = \"\";\n\n      const translating = transQuestion => {\n        if (question !== transQuestion) {\n          this.setState({\n            question: transQuestion\n          });\n          cookie.save(\"question\", transQuestion, {\n            path: \"/\"\n          });\n        }\n      }; // translate the question when selecting a different language\n\n\n      if (language !== cookieLanguage) {\n        googleTranslate.translate(question, language, function (err, translation) {\n          transQuestion = translation.translatedText;\n          translating(transQuestion);\n        });\n      }\n\n      this.setState({\n        language\n      });\n      cookie.save(\"language\", language, {\n        path: \"/\"\n      });\n    };\n\n    this.divStyle = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\",\n      width: \"100wh\"\n    };\n  }\n\n  componentDidMount() {\n    // load all of the language options from Google Translate to your app state\n    googleTranslate.getSupportedLanguages(\"en\", function (err, languageCodes) {\n      getLanguageCodes(languageCodes); // use a callback function to setState\n    });\n\n    const getLanguageCodes = languageCodes => {\n      this.setState({\n        languageCodes\n      });\n    };\n  }\n\n  render() {\n    const {\n      languageCodes,\n      language,\n      question\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: this.divStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, question), /*#__PURE__*/React.createElement(\"select\", {\n      className: \"select-language\",\n      value: language,\n      onChange: e => this.changeHandler(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, languageCodes.map(lang => /*#__PURE__*/React.createElement(\"option\", {\n      key: lang.language,\n      value: lang.language,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, lang.name))));\n  }\n\n}\n\nexport default Translate;","map":{"version":3,"sources":["/Users/zaiba/Desktop/a2z/One-word-at-a-time/dist_project/src/Translate.js"],"names":["React","Component","cookie","googleTranslate","Translate","state","languageCodes","language","load","question","changeHandler","cookieLanguage","transQuestion","translating","setState","save","path","translate","err","translation","translatedText","divStyle","display","alignItems","justifyContent","height","width","componentDidMount","getSupportedLanguages","getLanguageCodes","render","e","target","value","map","lang","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport cookie from \"react-cookies\";\n\nimport { googleTranslate } from \"./utils/googleTranslate\";\n\nclass Translate extends Component {\n  state = {\n    languageCodes: [],\n    language: cookie.load(\"language\") ? cookie.load(\"language\") : \"en\",\n    question: cookie.load(\"question\")\n      ? cookie.load(\"question\")\n      : \"What language do you prefer to read with?\"\n  };\n\n  componentDidMount() {\n    // load all of the language options from Google Translate to your app state\n\n    googleTranslate.getSupportedLanguages(\"en\", function(err, languageCodes) {\n      getLanguageCodes(languageCodes); // use a callback function to setState\n    });\n\n    const getLanguageCodes = languageCodes => {\n      this.setState({ languageCodes });\n    };\n  }\n\n  render() {\n    const { languageCodes, language, question } = this.state;\n\n    return (\n      <div style={this.divStyle}>\n        <p>{question}</p>\n\n        {/* iterate through language options to create a select box */}\n        <select\n          className=\"select-language\"\n          value={language}\n          onChange={e => this.changeHandler(e.target.value)}\n        >\n          {languageCodes.map(lang => (\n            <option key={lang.language} value={lang.language}>\n              {lang.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n\n  changeHandler = language => {\n    let { question } = this.state;\n    let cookieLanguage = cookie.load(\"language\");\n    let transQuestion = \"\";\n\n    const translating = transQuestion => {\n      if (question !== transQuestion) {\n        this.setState({ question: transQuestion });\n        cookie.save(\"question\", transQuestion, { path: \"/\" });\n      }\n    };\n\n    // translate the question when selecting a different language\n    if (language !== cookieLanguage) {\n      googleTranslate.translate(question, language, function(err, translation) {\n        transQuestion = translation.translatedText;\n        translating(transQuestion);\n      });\n    }\n\n    this.setState({ language });\n    cookie.save(\"language\", language, { path: \"/\" });\n  };\n\n  // just some inline css to center our demo\n  divStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    width: \"100wh\"\n  };\n}\n\nexport default Translate;"]},"metadata":{},"sourceType":"module"}