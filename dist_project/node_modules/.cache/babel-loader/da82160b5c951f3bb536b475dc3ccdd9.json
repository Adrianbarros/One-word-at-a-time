{"ast":null,"code":"var _jsxFileName = \"/Users/zaiba/Desktop/a2z/One-word-at-a-time/dist_project/src/components/wordAdd.js\";\nimport React, { Component } from 'react';\nimport cookie from \"react-cookies\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { googleTranslate } from \"../utils/googleTranslate\";\nimport axios from 'axios';\nexport class wordAdd extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hangeHandler = language => {\n      let {\n        question\n      } = this.state;\n      let cookieLanguage = cookie.load(\"language\");\n      let transQuestion = \"\";\n\n      const translating = transQuestion => {\n        if (question !== transQuestion) {\n          this.setState({\n            question: transQuestion\n          });\n          cookie.save(\"question\", transQuestion, {\n            path: \"/\"\n          });\n        }\n      }; // translate the question when selecting a different language\n\n\n      if (language !== cookieLanguage) {\n        googleTranslate.translate(question, language, function (err, translation) {\n          transQuestion = translation.translatedText;\n          translating(transQuestion);\n        });\n      }\n\n      this.setState({\n        language\n      });\n      cookie.save(\"language\", language, {\n        path: \"/\"\n      });\n    };\n\n    this.divStyle = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\",\n      width: \"100wh\"\n    };\n    this.onChangeWord = this.onChangeWord.bind(this);\n    this.onChangetarnslation = this.onChangetarnslation.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      word: '',\n      translation: '',\n      list: [],\n      languageCodes: [],\n      language: cookie.load(\"language\") ? cookie.load(\"language\") : \"en\",\n      question: cookie.load(\"question\") ? cookie.load(\"question\") : \"What language do you prefer to read with?\"\n    };\n  }\n\n  componentDidMount() {\n    // this.setState({\n    //     list: ['test'],\n    //     word: 'hi',\n    //     translation: 'hola'\n    // })\n    googleTranslate.getSupportedLanguages(\"en\", function (err, languageCodes) {\n      getLanguageCodes(languageCodes); // use a callback function to setState\n    });\n\n    const getLanguageCodes = languageCodes => {\n      this.setState({\n        languageCodes\n      });\n    };\n  }\n\n  onChangeWord(e) {\n    e.preventDefault();\n    this.setState({\n      word: e.target.value\n    });\n  }\n\n  onChangetarnslation(e) {\n    e.preventDefault();\n    this.setState({\n      translation: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const definitions = {\n      word: this.state.word,\n      translation: this.state.translation\n    };\n    console.log(definitions);\n    axios.post('http://localhost:5000/words/add', definitions).then(res => console.log(res.data));\n    window.location = '/word-list';\n  }\n\n  render() {\n    const {\n      languageCodes,\n      language,\n      question\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, \"Your Word of the Day\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, \"Your Word\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      required: true,\n      value: this.state.word,\n      onChange: this.onChangeWord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, \"translation\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.translation,\n      onChange: this.onChangetarnslation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Get translation\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\nexport default wordAdd;","map":{"version":3,"sources":["/Users/zaiba/Desktop/a2z/One-word-at-a-time/dist_project/src/components/wordAdd.js"],"names":["React","Component","cookie","googleTranslate","axios","wordAdd","constructor","props","hangeHandler","language","question","state","cookieLanguage","load","transQuestion","translating","setState","save","path","translate","err","translation","translatedText","divStyle","display","alignItems","justifyContent","height","width","onChangeWord","bind","onChangetarnslation","onSubmit","word","list","languageCodes","componentDidMount","getSupportedLanguages","getLanguageCodes","e","preventDefault","target","value","definitions","console","log","post","then","res","data","window","location","render","position"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport cookie from \"react-cookies\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { googleTranslate } from \"../utils/googleTranslate\";\nimport axios from 'axios'\n\nexport class wordAdd extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.onChangeWord = this.onChangeWord.bind(this);\n        this.onChangetarnslation = this.onChangetarnslation.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            word: '',\n            translation: '',\n            list: [],\n            languageCodes: [],\n            language: cookie.load(\"language\") ? cookie.load(\"language\") : \"en\",\n            question: cookie.load(\"question\")\n            ? cookie.load(\"question\")\n            : \"What language do you prefer to read with?\"\n        };\n    }\n    componentDidMount() {\n        // this.setState({\n        //     list: ['test'],\n        //     word: 'hi',\n        //     translation: 'hola'\n        // })\n        googleTranslate.getSupportedLanguages(\"en\", function(err, languageCodes) {\n        getLanguageCodes(languageCodes); // use a callback function to setState\n    });\n    const getLanguageCodes = languageCodes => {\n        this.setState({ languageCodes });\n      };\n    }\n    onChangeWord(e) {\n        e.preventDefault();\n        this.setState({\n            word: e.target.value\n        });\n    }\n    onChangetarnslation(e) {\n        e.preventDefault();\n\n        this.setState({\n            translation: e.target.value\n        });\n    }\n    onSubmit(e) {\n        e.preventDefault();\n        const definitions = {\n            word: this.state.word,\n            translation: this.state.translation\n        }\n        \n        console.log(definitions)\n        axios.post('http://localhost:5000/words/add', definitions)\n            .then(res => console.log(res.data));\n        window.location = '/word-list'\n    }\n    render() {\n        const { languageCodes, language, question } = this.state;\n        return (\n\n            <div style={{ position: 'center' }}>\n            \n                <h3>Your Word of the Day</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Your Word</label>\n                        <input\n                            type=\"text\"\n                            required\n                            value={this.state.word}\n                            onChange={this.onChangeWord}\n                        />\n\n                    </div>\n                    <div className=\"form-group\">\n\n                    </div>\n                    <label>translation</label>\n                    <input\n                        type=\"text\"\n                        value={this.state.translation}\n                        onChange={this.onChangetarnslation}\n                    />\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Get translation\" className=\"btn btn-primary\" />\n                    </div>\n                </form>\n\n            </div>\n\n        )\n    }\n    hangeHandler = language => {\n        let { question } = this.state;\n        let cookieLanguage = cookie.load(\"language\");\n        let transQuestion = \"\";\n        const translating = transQuestion => {\n            if (question !== transQuestion) {\n              this.setState({ question: transQuestion });\n              cookie.save(\"question\", transQuestion, { path: \"/\" });\n            }\n          };\n          // translate the question when selecting a different language\n    if (language !== cookieLanguage) {\n        googleTranslate.translate(question, language, function(err, translation) {\n          transQuestion = translation.translatedText;\n          translating(transQuestion);\n        });\n      }\n      this.setState({ language });\n      cookie.save(\"language\", language, { path: \"/\" });\n    };\n    // just some inline css to center our demo\n  divStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    width: \"100wh\"\n  };\n    \n}\n\nexport default wordAdd\n"]},"metadata":{},"sourceType":"module"}