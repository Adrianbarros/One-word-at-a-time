{"version":3,"sources":["components/Navbar.js","components/wordList.js","components/wordAdd.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","Word","props","word","translation","wordList","state","list","Axios","get","then","response","setState","data","catch","error","console","log","this","map","current","key","_id","wordAdd","onChangeWord","bind","onChangetarnslation","onSubmit","e","preventDefault","target","value","definitions","axios","post","res","window","location","style","position","type","required","onChange","App","path","exact","component","AddWord","WordsList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f5696822.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n\n\nexport class Navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n                <Link to=\"/\" className=\"navbar-brand\">One Word</Link>\n                <div className=\"collpase navbar-collapse\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"navbar-item\">\n                            <Link to=\"/word-list\" className=\"nav-link\">Your words</Link>\n                        </li>\n                    </ul>\n\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar\n","import React, { Component } from 'react'\nimport Axios from 'axios';\n\n\nconst Word = props => (\n    <tr>\n        <td>{props.word.word}</td>\n        <td>{props.word.translation}</td>\n    </tr>\n)\n\n\nexport class wordList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            list: []\n        }\n    }\n    componentDidMount() {\n        Axios.get('http://localhost:5000/words/')\n            .then(response => {\n                this.setState({ list: response.data })\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n    wordList() {\n        return this.state.list.map(current => {\n            return <Word word={current} key={current._id} />\n        })\n    }\n    render() {\n        return (\n            <div>\n                <h3>All your Words</h3>\n                <table className=\"table\">\n                    <thead className=\"thea-light\">\n                        <tr>\n                            <th>word</th>\n                            <th>translation</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.wordList()}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default wordList\n","import React, { Component } from 'react'\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios'\n\nexport class wordAdd extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.onChangeWord = this.onChangeWord.bind(this);\n        this.onChangetarnslation = this.onChangetarnslation.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            word: '',\n            translation: '',\n            list: []\n        }\n    }\n    componentDidMount() {\n        // this.setState({\n        //     list: ['test'],\n        //     word: 'hi',\n        //     translation: 'hola'\n        // })\n    }\n    onChangeWord(e) {\n        e.preventDefault();\n        this.setState({\n            word: e.target.value\n        });\n    }\n    onChangetarnslation(e) {\n        e.preventDefault();\n\n        this.setState({\n            translation: e.target.value\n        });\n    }\n    onSubmit(e) {\n        e.preventDefault();\n        const definitions = {\n            word: this.state.word,\n            translation: this.state.translation\n        }\n        \n        console.log(definitions)\n        axios.post('http://localhost:5000/words/add', definitions)\n            .then(res => console.log(res.data));\n        window.location = '/word-list'\n    }\n    render() {\n        return (\n\n            <div style={{ position: 'center' }}>\n\n                <h3 className=\"title\">Your Word of the Day</h3>               \n                    <br></br>\n                    <br></br>                   \n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Your Word</label>\n                        <input\n                            type=\"text\"\n                            required\n                            value={this.state.word}\n                            onChange={this.onChangeWord}\n                        />\n\n                    </div>                    \n                    <br></br>\n                   \n                    <div className=\"form-group\">\n\n                    </div> \n                    <div className=\"form-group\">\n\n                    <label className=\"form-group \">Translation</label>\n                    <input\n                        type=\"text\"\n                        value={this.state.translation}\n                        onChange={this.onChangetarnslation}\n                    />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Get translation\" className=\"btn btn-primary\" />\n                    </div>\n                </form>\n\n            </div>\n\n        )\n    }\n}\n\nexport default wordAdd\n","import React, { Component } from 'react'\nimport './App.css';\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport WordsList from './components/wordList';\nimport AddWord from './components/wordAdd';\n \n\n\n\nexport class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Navbar />\n        <br />\n        <Route path=\"/\" exact component={AddWord} />\n        <Route path=\"/word-list\" component={WordsList} />\n      </Router>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}